'.source.js':
  'Oz: h.pure(....)':
    prefix: 'hpr'
    body: 'const ${1:Comp} = h.pure(({$2}) => {\n\t$3\n})'

  'React: componentDidMount() { ... }':
    prefix: 'cdm'
    body: 'componentDidMount() {\n\t${1}\n}${2}'

  'React: componentDidUpdate(pp, ps) { ... }':
    prefix: 'cdu'
    body: 'componentDidUpdate(${1}) {\n\t${2}\n}${3}'

  'React: componentWillMount() { ... }':
    prefix: 'cwm'
    body: 'componentWillMount() {\n\t${1}\n}${2}'

  'React: componentWillReceiveProps(np) { ... }':
    prefix: 'cwr'
    body: 'componentWillReceiveProps(nextProps) {\n\t${1}\n}${2}'

  'React: componentWillUnmount() { ... }':
    prefix: "cwun"
    body: "componentWillUnmount() {\n\t${1}\n}${2}"

  'React: componentWillUpdate(np, ns) { ... }':
    prefix: 'cwu'
    body: 'componentWillUpdate(${1}) {\n\t${2}\n}${3}'

  "React: getInitialState() { return {...} } ":
    prefix: "gis"
    body: "getInitialState() {\n\treturn {\n\t\t${1}: ${2}\n\t};\n},"

  'React: propTypes { ... }':
    prefix: 'pt'
    body: 'propTypes: {\n\t${1}: PropTypes.${2:string}\n},'

  'React: class skeleton':
    prefix: 'rcl'
    body: 'class ${1:Component} extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t${2:<div></div>}\n\t\t);\n\t}\n}'

  'React: createClass skeleton':
    prefix: 'rc'
    body: 'const ${1:Component} = React.createClass({\n\n\trender() {\n\t\treturn (\n\t\t\t${2:<div></div>}\n\t\t);\n\t}\n\n});'

  'React: render() { return ... }':
    prefix: 'rr'
    body: 'render() {\n\treturn (\n\t\t${1:<div />}\n\t);\n}'

  'React: setState({ ... })':
    prefix: 'sst'
    body: 'this.setState({\n\t${1}: ${2}\n});'

  'React: cx( ... )':
    prefix: 'clx'
    body: 'cx($1)'

  'React: pure component':
    prefix: 'rp'
    body: 'const ${1:Comp} = ({$2}) => {\n\t$3\n}'

  'JS: Object function definition () {}':
    prefix: 'ofn'
    body: '${1:func}(${2:args}) {\n\t$3\n}'

  'JS: Pragma':
    prefix: 'pgm'
    body: '// ------------------------------------------------------------\n// ${1: Pragma}'

'.source.coffee':
  'Coffee: Pragma':
    'prefix': 'pgm'
    'body': '# ------------------------------------------------------------\n# ${1: Pragma}'

'.source.ruby':
  'Ruby: pragma':
    'prefix': 'pgm'
    'body': '# ------------------------------------------------------------\n# ${1: Pragma}'

'.source.css.scss':
  'CSS: pragma':
    'prefix': 'pgm'
    'body': '// ------------------------------------------------------------\n// ${1: Pragma}'

'.source.gfm':
  'Spec: Rich Hickey Style':
    'prefix': 'rhspec'
    'body': """
      # ${1: Title}

      ## The problem

      - ${2}

      ## What we know

      - ${3}

      ## Questions

      - ${4}

      ## Related Problems

      - ${5}

      ## Requirements

      - ${6}
    """
  'Routines: daily':
    'prefix': 'dl'
    'body': """
      ---

      ${1:Date:}

      **Did you wake up at 6:30AM?** ${2:Y/N}
      ${3}

      **Did you do the pimsleur course?** ${4:Y/N}
      ${5}

      **How did the day go?**
      *(Family, Wit, Health, Relationships)*
      ${6}
    """
  'Routines: weekly':
    'prefix': 'wl'
    'body': """
      ---

      ${1:Date:}

      **Family**

      *did you speak with Mamiko, Dediko, Eliza, Nino?*
      *are they happy? do you know what they are thinking?*

      ${2}

      **Wit**

      *how well did you lead?*
      *where you proactive, positive, execution oriented?*
      *was impact high level, or table stakes?*

      ${3}

      **Health / Habits**

      *Did you work out 3 times?*
      *Did you go to the sauna?*
      *Did you wake up at 6:30AM, did you do pimsleur?*

      ${4}

      **Relationships**

      *Have you met with at least two friends?*

      ${5}

      **Checklist**
      ${6}
      [] Well Shaven
      [] Room is clean
      [] Dressing well, with clean clothes
      [] Spoken with Mamiko
      [] Spoken with Dediko
      [] Spoken with Nino
      [] Spoken with Eliza
      [] Worked at a consistent time
      [] Worked out 3x / week
      [] Omnifocus is reviewed

      **Plan for next week**

      ${7}
    """
